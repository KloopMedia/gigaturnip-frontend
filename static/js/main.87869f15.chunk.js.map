{"version":3,"sources":["components/nodes/CustomNode.tsx","components/nodes/LogicNode.tsx","components/nodes/StageNode.tsx","components/sidebar/Sidebar.tsx","util/Urls.js","util/Axios.js","components/graph/Graph.tsx","components/custom-widgets/file-widget/CustomFileWidget.tsx","components/form-builders/PreviewStage.tsx","components/custom-widgets/file-widget/CustomFileType.tsx","components/form-builders/DocBuilder.tsx","components/form-builders/StageBuilder.tsx","components/form-builders/GetFormFields.js","components/form-builders/LogicBuilder.tsx","components/actions/Actions.tsx","components/task/Task.tsx","util/Firebase.js","util/Auth.js","components/appbar/Appbar.tsx","components/cards/Card.tsx","components/dialogs/Dialog.tsx","components/chains/Chains.tsx","components/campaigns/Campaigns.tsx","components/appbar/SimpleAppbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","background","borderColor","borderWidth","borderStyle","borderRadius","fontSize","width","textAlign","padding","CustomNode","data","style","classes","Grid","className","label","type","position","Position","Top","Bottom","customNodeStyles","CustomLogicNode","CustomStageNode","Sidebar","useState","draggable","setDraggable","formResponses","setFormResponses","useEffect","onDragStart","event","nodeLabel","nodeType","console","log","JSON","stringify","dataTransfer","setData","effectAllowed","onDragEnd","undefined","marginRight","schema","formData","onChange","e","color","display","justifyContent","alignItems","campaignsUrl","chainsUrl","taskstagesUrl","conditionalstagesUrl","tasksUrl","instance","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","DnDFlow","reactFlowWrapper","useRef","history","useHistory","chainId","useParams","reactFlowInstance","setReactFlowInstance","elements","setElements","all","get","then","results","stageNodes","logicNodes","forEach","node","allNodes","nodes","map","id","toString","x","parseFloat","x_pos","y","y_pos","name","stage","in_stages","length","sourceId","edge","source","target","arrowHeadType","els","addEdge","getNode","filter","pop","getUrl","updateConnections","a","currentNodeId","method","url","res","out_stages","catch","err","connections","parsed","connection","ids","patch","addConnections","targetNode","sourceNode","removeConnections","createNode","chain","parseInt","post","onConnect","params","newParams","onDrop","preventDefault","reactFlowBounds","current","getBoundingClientRect","transfer","getData","project","clientX","left","clientY","top","parsedData","parse","newNode","es","concat","onElementDoubleClick","element","location","pathname","push","nodeTypes","LOGIC","STAGE","ref","onElementsRemove","elementsToRemove","nodeIdsToRemove","n","includes","isEdge","delete","removeElements","onNodeDoubleClick","onEdgeDoubleClick","onLoad","_reactFlowInstance","onDragOver","dropEffect","onNodeDragStop","updateNode","height","CustomFileWidget","props","title","Preview","jsonSchema","uiSchema","onJsonChange","onUiChange","json_schema","ui_schema","stage_data","edit","setEdit","localJson","setLocalJson","localUi","setLocalUi","widgets","customfile","onSubmit","Switch","checked","inputProps","Button","variant","onClick","Typography","TextField","multiline","fullWidth","defaultValue","InputProps","readOnly","value","marginTop","marginBottom","navigator","clipboard","writeText","alert","CustomFileType","file","displayName","matchIf","types","widget","defaultDataSchema","defaultUiSchema","DocBuilder","handleChange","editorRef","docData","setDocData","window","matchMedia","matches","minWidth","margin","onEditorChange","newValue","editor","d","tinymceScriptSrc","process","onInit","evt","init","plugins","menubar","toolbar","toolbar_sticky","image_advtab","importcss_append","image_caption","noneditable_noneditable_class","toolbar_mode","contextmenu","autosave_prefix","save_onsavecallback","content_style","Builder","setSchema","setUiSchema","StageOptions","optionsSchema","preview","setPreview","editorView","setEditorView","editorData","setEditorData","rich_text","options","float","IconButton","p","inline","disabled","PreviewStage","uischema","newSchema","newUiSchema","mods","customFormInputs","responses","getFormFields","retrievedSchema","retrieveSchema","pathSchema","toPathSchema","getFieldNames","getAllPaths","_obj","acc","paths","Object","keys","key","newPaths","path","__rjsf_additionalProperties","$name","replace","formValue","_get","_isEmpty","ready","setReady","fields","setFields","connectedStages","setConnectedStages","pingPong","setPingPong","currentStage","conditions","pingpong","getStage","stageId","taskStage","getConnectedStages","connId","connectedIds","connStages","allFields","stageObject","values","stageSchema","deps","dependencies","stageFields","GetFormFields","depValues","depFields","dep","hasOwnProperty","oneOf","allOf","nested","fiction","flat","getDependentFields","Array","from","Set","items","properties","field","enum","condition","required","FormControlLabel","control","Checkbox","handleCreateTask","split","caseData","case","taskData","container","justify","component","item","task","setFormData","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","firestore","settings","ignoreUndefinedProperties","signInWithGoogle","setCustomParameters","prompt","signInWithPopup","signOut","removeItem","reload","AuthContext","React","createContext","AuthProvider","children","currentUser","setCurrentUser","onAuthStateChanged","user","getIdToken","idToken","setItem","onIdTokenChanged","Provider","drawerWidth","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","mixins","content","flexGrow","formControl","selectEmpty","select","selectIcon","fill","Appbar","useTheme","campaignId","useContext","open","setOpen","campaign","setCampaign","allCampaigns","setAllCampaigns","CssBaseline","AppBar","clsx","Toolbar","aria-label","noWrap","cursor","FormControl","size","Select","autoWidth","labelId","disableUnderline","icon","camp","MenuItem","Drawer","paper","direction","Divider","List","ListItem","button","page","ListItemIcon","ListItemText","primary","extra","ParentCard","description","onCardButtonClick","Card","CardContent","gutterBottom","CardActions","ParentDialog","onClose","onSave","setName","setDescription","handleClose","Dialog","aria-labelledby","DialogTitle","DialogContent","rows","DialogActions","chains","setChains","filtered","handleAddChain","handleCardRedirect","startIcon","campaigns","setCampaigns","handleCampaignAdd","App","exact","StageBuilder","LogicBuilder","Task","Actions","Chains","Graph","SimpleAppbar","Campaigns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87869f15.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Handle, Position} from 'react-flow-renderer';\r\nimport {createStyles, Grid, makeStyles, Theme} from \"@material-ui/core\";\r\nimport {NodeParams} from \"../../util/Types\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            background: '#FFF',\r\n            borderColor: '#000',\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderRadius: '3px',\r\n            fontSize: '12px',\r\n            width: '150px',\r\n            textAlign: 'center',\r\n            padding: 10\r\n        },\r\n    }));\r\n\r\n\r\n\r\nconst CustomNode = ({data, style}: NodeParams) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid className={classes.root} style={style}>\r\n            <div>{data.label}</div>\r\n            <Handle\r\n                type=\"target\"\r\n                position={Position.Top}\r\n                style={{borderRadius: '100%'}}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position={Position.Bottom}\r\n                style={{borderRadius: '100%'}}\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CustomNode","import React from 'react';\r\nimport CustomNode from \"./CustomNode\";\r\nimport {NodeParams} from \"../../util/Types\";\r\n\r\nconst customNodeStyles = {\r\n  borderColor: '#0041d0'\r\n};\r\n\r\nconst CustomLogicNode = ({ data }: NodeParams) => <CustomNode data={data} style={customNodeStyles} />;\r\n\r\nexport default CustomLogicNode","import React from 'react';\r\nimport CustomNode from \"./CustomNode\";\r\nimport {NodeParams} from \"../../util/Types\";\r\n\r\nconst customNodeStyles = {\r\n  borderColor: '#32CD32'\r\n};\r\n\r\nconst CustomStageNode = ({ data }: NodeParams) => <CustomNode data={data} style={customNodeStyles} />;\r\n\r\nexport default CustomStageNode","import React, {useEffect, useState} from 'react';\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport {JSONSchema7} from \"json-schema\";\r\n\r\nimport schema from '../../json-schema/SidebarSchema.json'\r\n\r\ntype FormResponsesProps = { label: string }\r\n\r\nconst Sidebar = () => {\r\n    const [draggable, setDraggable] = useState(false)\r\n    const [formResponses, setFormResponses] = useState<FormResponsesProps | undefined>()\r\n\r\n    useEffect(() => {\r\n\r\n        if (formResponses && formResponses.label && formResponses.label !== '') {\r\n            setDraggable(true)\r\n        } else {\r\n            setDraggable(false)\r\n        }\r\n    }, [formResponses])\r\n\r\n    const onDragStart = (event: { dataTransfer: DataTransfer }, nodeLabel: string, nodeType: string) => {\r\n        console.log(nodeLabel, nodeType)\r\n        let data = JSON.stringify({...formResponses, type: nodeType})\r\n        event.dataTransfer.setData('application/reactflow', data);\r\n        event.dataTransfer.effectAllowed = 'move';\r\n    };\r\n\r\n    const onDragEnd = () => {\r\n        setFormResponses(undefined)\r\n    }\r\n\r\n    return (\r\n        <aside>\r\n            <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n            <div style={{marginRight: 5}}>\r\n                <Form schema={schema as JSONSchema7} formData={formResponses}\r\n                      onChange={(e) => setFormResponses(e.formData)}> </Form>\r\n            </div>\r\n            <div draggable={false} style={{\r\n                color: 'red',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                padding: 10\r\n            }}>{!draggable && 'Enter Label to drag the node'}</div>\r\n            <div className=\"dndnode stage\" onDragEnd={onDragEnd}\r\n                 onDragStart={(event) => onDragStart(event, formResponses ? formResponses.label : '', 'STAGE')}\r\n                 draggable={draggable}>\r\n                Stage Node\r\n            </div>\r\n            <div className=\"dndnode logic\" onDragEnd={onDragEnd}\r\n                 onDragStart={(event) => onDragStart(event, formResponses ? formResponses.label : '', 'LOGIC')}\r\n                 draggable={draggable}>\r\n                Logic Node\r\n            </div>\r\n            {/*<div className=\"dndnode manual\" onDragEnd={onDragEnd}*/}\r\n            {/*     onDragStart={(event) => onDragStart(event, formResponses ? formResponses.label : '', 'STAGE')}*/}\r\n            {/*     draggable={draggable}>*/}\r\n            {/*    Document Node*/}\r\n            {/*</div>*/}\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default Sidebar","const baseUrl = \"https://journal-bb5e3.uc.r.appspot.com/\"\r\n// const baseUrl = \"http://127.0.0.1:8000/\"\r\nconst campaignsUrl = \"api/v1/campaigns/\"\r\nconst chainsUrl = \"api/v1/chains/\"\r\nconst taskstagesUrl = \"api/v1/taskstages/\"\r\nconst ranksUrl = \"api/v1/ranks/\"\r\nconst rankslimitsUrl = \"api/v1/ranklimits/\"\r\nconst webhookstagesUrl = \"api/v1/webhookstages/\"\r\nconst conditionalstagesUrl = \"api/v1/conditionalstages/\"\r\nconst manualstagesUrl = \"api/v1/manualstages/\" // TBD\r\nconst casesUrl = \"api/v1/cases/\"\r\nconst tasksUrl = \"api/v1/tasks/\"\r\n\r\nexport {\r\n    baseUrl,\r\n    campaignsUrl,\r\n    chainsUrl,\r\n    taskstagesUrl,\r\n    ranksUrl,\r\n    rankslimitsUrl,\r\n    webhookstagesUrl,\r\n    conditionalstagesUrl,\r\n    casesUrl,\r\n    tasksUrl,\r\n    manualstagesUrl\r\n}","import axios from \"axios\";\r\nimport {baseUrl} from \"./Urls\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: baseUrl\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n    function (config) {\r\n        const token = localStorage.getItem(\"token\");\r\n\r\n        if (token) {\r\n            config.headers[\"Authorization\"] = 'JWT ' + token;\r\n        }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default instance;","// noinspection ES6MissingAwait,JSIgnoredPromiseFromCall\r\n\r\nimport React, {useEffect, useRef, useState} from 'react';\r\nimport ReactFlow, {addEdge, Controls, Edge, FlowElement, isEdge, ReactFlowProvider} from 'react-flow-renderer';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport CustomLogicNode from '../nodes/LogicNode'\r\nimport CustomStageNode from '../nodes/StageNode'\r\nimport Sidebar from '../sidebar/Sidebar';\r\n\r\nimport '../../dnd.css';\r\nimport axios from '../../util/Axios';\r\nimport {conditionalstagesUrl, manualstagesUrl, taskstagesUrl} from '../../util/Urls'\r\nimport {ConnectionsParams, RouterParams} from \"../../util/Types\";\r\n\r\n\r\nconst DnDFlow = () => {\r\n    const reactFlowWrapper = useRef(null);\r\n    const history = useHistory();\r\n    const {chainId} = useParams<RouterParams>();\r\n\r\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n    const [elements, setElements] = useState<FlowElement[]>([]);\r\n\r\n    // <------ UseEffect Part ------>\r\n    useEffect(() => {\r\n        const getStageNodes = () => {\r\n            return axios.get(`${taskstagesUrl}?chain=${chainId}`)\r\n        };\r\n\r\n        const getLogicNodes = () => {\r\n            return axios.get(`${conditionalstagesUrl}?chain=${chainId}`)\r\n        };\r\n\r\n        Promise.all([getStageNodes(), getLogicNodes()])\r\n            .then((results) => {\r\n                const stageNodes = results[0].data;\r\n                const logicNodes = results[1].data;\r\n\r\n                // Add types to nodes\r\n                stageNodes.forEach((node: any) => node.type = \"STAGE\")\r\n                logicNodes.forEach((node: any) => node.type = \"LOGIC\")\r\n\r\n                // Construct nodes and save to state\r\n                const allNodes = [...stageNodes, ...logicNodes]\r\n                const nodes: FlowElement[] = allNodes.map((node: any) => (\r\n                        {\r\n                            id: node.id.toString(),\r\n                            position: {x: parseFloat(node.x_pos), y: parseFloat(node.y_pos)},\r\n                            data: {label: node.name},\r\n                            type: node.type\r\n                        }\r\n                    )\r\n                )\r\n                setElements(nodes)\r\n                return allNodes\r\n            })\r\n            .then(allNodes => {\r\n                // Construct edges and save to state\r\n                allNodes.forEach(stage => {\r\n                    if (stage.in_stages.length > 0) {\r\n                        stage.in_stages.forEach((sourceId: string | number) => {\r\n                            const edge = {\r\n                                source: sourceId.toString(),\r\n                                target: stage.id.toString(),\r\n                                id: `${sourceId}-${stage.id}`,\r\n                                arrowHeadType: \"arrow\"\r\n                            } as Edge\r\n                            setElements((els) => addEdge(edge, els))\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n    }, [chainId])\r\n\r\n\r\n    // <------ Util Functions Part ------>\r\n    /**\r\n     * Search node in elements (state) and return it.\r\n     * @param id\r\n     * @return {FlowElement | undefined}\r\n     */\r\n    const getNode = (id: string | number) => {\r\n        return elements.filter(node => node.id == id).pop()\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @returns {string | undefined}\r\n     */\r\n    const getUrl = (node: FlowElement) => {\r\n        if (node.type === \"STAGE\") {\r\n            return taskstagesUrl\r\n        }\r\n        if (node.type === \"LOGIC\") {\r\n            return conditionalstagesUrl\r\n        }\r\n        if (node.type === \"MANUAL\") {\r\n            return manualstagesUrl\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * Add or remove connections (in_stages && out_stages) in database via API\r\n     * @param node - Source or Target of the current node\r\n     * @param currentNodeId\r\n     * @param type - 'in' (Incoming) or 'out' (Outgoing) connection\r\n     * @param method - 'create' or 'delete'\r\n     * @returns {Promise<void>}\r\n     */\r\n    const updateConnections = async ({node, currentNodeId, type, method}: ConnectionsParams) => {\r\n        // Returns url of given node type (logic or stage or undefined)\r\n        const url = getUrl(node)\r\n        if (url) {\r\n            // Get connections of a given node\r\n            const connections = await axios.get(url + node.id + '/').then(res => {\r\n                if (type === 'in') {\r\n                    return res.data.in_stages\r\n                }\r\n                if (type === 'out') {\r\n                    return res.data.out_stages\r\n                }\r\n                return undefined;\r\n            }).catch(err => undefined);\r\n\r\n            if (connections) {\r\n                // Change ids type to String\r\n                let parsed = connections.map((connection: string | number) => connection.toString())\r\n\r\n                let ids = []\r\n                // Add current node id to given node connections\r\n                if (method === 'create') {\r\n                    ids = [currentNodeId, ...parsed]\r\n                }\r\n                if (method === 'delete') {\r\n                    ids = parsed.filter((connection: string) => connection !== currentNodeId)\r\n                }\r\n\r\n                let data = undefined\r\n                if (type === 'in') {\r\n                    data = {in_stages: ids}\r\n                }\r\n                if (type === 'out') {\r\n                    data = {out_stages: ids}\r\n                }\r\n\r\n                if (data) {\r\n                    console.log(data)\r\n                    axios.patch(url + node.id + '/', data)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const addConnections = async (target: string, source: string) => {\r\n        const targetNode = getNode(target)\r\n        const sourceNode = getNode(source)\r\n\r\n        if (targetNode) {\r\n            updateConnections({node: targetNode, currentNodeId: source, type: 'in', method: 'create'})\r\n        }\r\n\r\n        if (sourceNode) {\r\n            updateConnections({node: sourceNode, currentNodeId: target, type: 'out', method: 'create'})\r\n        }\r\n    }\r\n\r\n\r\n    const removeConnections = async (target: string, source: string) => {\r\n        const targetNode = getNode(target)\r\n        const sourceNode = getNode(source)\r\n\r\n        if (targetNode) {\r\n            updateConnections({node: targetNode, currentNodeId: source, type: 'in', method: 'delete'})\r\n        }\r\n\r\n        if (sourceNode) {\r\n            updateConnections({node: sourceNode, currentNodeId: target, type: 'out', method: 'delete'})\r\n        }\r\n    }\r\n\r\n    const removeElements = (elementsToRemove: FlowElement[], elements: FlowElement[]) => {\r\n        let nodeIdsToRemove = elementsToRemove.map((n: any) => {\r\n            return n.id;\r\n        });\r\n\r\n        return elements.filter((element: any) => {\r\n            if (nodeIdsToRemove.includes(element.id)) {\r\n                if (isEdge(element)) {\r\n                    let target = element.target\r\n                    let source = element.source\r\n\r\n                    removeConnections(target, source)\r\n\r\n                } else {\r\n                    const url = getUrl(element)\r\n                    if (url) {\r\n                        axios.delete(url + element.id + '/')\r\n                    }\r\n                }\r\n                return false\r\n            } else {\r\n                return true\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Update node (stage) coordinates in database via API\r\n     * @param node\r\n     */\r\n    const updateNode = (node: any) => {\r\n        let x_pos = node.position.x\r\n        let y_pos = node.position.y\r\n        let data = {x_pos, y_pos}\r\n        const url = getUrl(node)\r\n        if (url) {\r\n            axios.patch(url + node.id + '/', data)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create node (stage) in database via API\r\n     * @param node\r\n     * @returns {Promise<string | undefined>}\r\n     */\r\n    const createNode = async (node: { type: string, position: { x: number, y: number }, label: string }) => {\r\n        let data = {\r\n            name: node.label,\r\n            x_pos: node.position.x,\r\n            y_pos: node.position.y,\r\n            chain: parseInt(chainId),\r\n            out_stages: []\r\n        }\r\n\r\n        const url = getUrl(node as any)\r\n        if (url) {\r\n            let stage = await axios.post(url, data).then(res => res.data).catch(err => console.log(err))\r\n            return stage.id.toString()\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n\r\n    // <------ Frameworks Functions Part ------>\r\n\r\n    const onConnect = async (params: object) => {\r\n        const newParams: any = {...params, arrowHeadType: 'arrow'}\r\n        const target = newParams.target\r\n        const source = newParams.source\r\n\r\n        setElements((els: FlowElement[]) => addEdge(newParams, els))\r\n        addConnections(target, source)\r\n    }\r\n\r\n    const onElementsRemove = (elementsToRemove: FlowElement[]) => {\r\n        setElements((els) => removeElements(elementsToRemove, els));\r\n    }\r\n\r\n    const onLoad = (_reactFlowInstance: any) =>\r\n        setReactFlowInstance(_reactFlowInstance);\r\n\r\n    const onDragOver = (event: any) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    };\r\n\r\n    const onDrop = async (event: any) => {\r\n        event.preventDefault();\r\n\r\n        // @ts-ignore\r\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n        // Get new node data from sidebar\r\n        const transfer = event.dataTransfer.getData('application/reactflow');\r\n        // @ts-ignore\r\n        const position = reactFlowInstance.project({\r\n            x: event.clientX - reactFlowBounds.left,\r\n            y: event.clientY - reactFlowBounds.top,\r\n        });\r\n\r\n        const parsedData = JSON.parse(transfer)\r\n        const label = parsedData.label\r\n        const type = parsedData.type\r\n\r\n        const id = await createNode({type, position, label})\r\n\r\n        let newNode = {\r\n            id,\r\n            type,\r\n            position,\r\n            data: {label},\r\n        };\r\n\r\n        setElements((es) => es.concat(newNode));\r\n    };\r\n\r\n    const onNodeDragStop = (event: any, node: any) => {\r\n        updateNode(node)\r\n    }\r\n\r\n    const onElementDoubleClick = (event: any, element: any) => {\r\n        console.log(element)\r\n        let location = history.location.pathname\r\n        if (element.id) {\r\n            if (element.type === 'LOGIC') {\r\n                history.push(`${location}/createlogic/${element.id}`)\r\n            }\r\n            if (element.type === 'STAGE') {\r\n                history.push(`${location}/createstage/${element.id}`)\r\n            }\r\n            // if (element.type === 'DOC') {\r\n            //     history.push(`${location}/createdoc/${element.id}`)\r\n            // }\r\n            if (element.type === 'default' && (element.target || element.source)) {\r\n                console.log('edge')\r\n            }\r\n        }\r\n    }\r\n\r\n    // Init custom node types\r\n    const nodeTypes = {\r\n        LOGIC: CustomLogicNode,\r\n        STAGE: CustomStageNode\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"dndflow\">\r\n            <ReactFlowProvider>\r\n                <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                    <ReactFlow\r\n                        nodeTypes={nodeTypes}\r\n                        elements={elements}\r\n                        onConnect={onConnect}\r\n                        onElementsRemove={onElementsRemove}\r\n                        onNodeDoubleClick={onElementDoubleClick}\r\n                        onEdgeDoubleClick={onElementDoubleClick}\r\n                        onLoad={onLoad}\r\n                        onDrop={onDrop}\r\n                        onDragOver={onDragOver}\r\n                        onNodeDragStop={onNodeDragStop}\r\n                        style={{\r\n                            width: '100%',\r\n                            height: 700,\r\n                        }}\r\n                    >\r\n                        <Controls/>\r\n                    </ReactFlow>\r\n                </div>\r\n                <Sidebar/>\r\n            </ReactFlowProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DnDFlow;","import React from 'react'\r\n\r\n\r\nconst CustomFileWidget = (props: any) => {\r\n    const {schema} = props;\r\n    return (\r\n        <div>\r\n            <label className={\"form-label\"}>{schema?.title}</label>\r\n            <br/>\r\n            <input type=\"file\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomFileWidget","import React, {useEffect, useState} from 'react'\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport {Button, Switch, TextField, Typography} from \"@material-ui/core\";\r\n\r\nimport CustomFileWidget from '../custom-widgets/file-widget/CustomFileWidget'\r\nimport {PreviewFormParams} from \"../../util/Types\";\r\n\r\n\r\nconst Preview = ({jsonSchema, uiSchema, formResponses, onJsonChange, onUiChange}: PreviewFormParams) => {\r\n    const json_schema = JSON.parse(jsonSchema) ?? {}\r\n    const ui_schema = JSON.parse(uiSchema) ?? {}\r\n    const stage_data = JSON.stringify({...formResponses, json_schema: json_schema, ui_schema: ui_schema})\r\n    const [edit, setEdit] = useState(false)\r\n    const [localJson, setLocalJson] = useState('')\r\n    const [localUi, setLocalUi] = useState('')\r\n\r\n    const widgets = {\r\n        customfile: CustomFileWidget\r\n    };\r\n\r\n    useEffect(() => {\r\n        setLocalJson(jsonSchema)\r\n        setLocalUi(uiSchema)\r\n    }, [jsonSchema, uiSchema])\r\n\r\n    const copyToClipboard = () => {\r\n        navigator.clipboard.writeText(stage_data).then(() => console.log(\"success\")).catch(err => alert(err))\r\n    }\r\n\r\n    const handleJsonSchemaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLocalJson(event.target.value)\r\n    }\r\n\r\n    const handleUiSchemaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLocalUi(event.target.value)\r\n    }\r\n\r\n    const handleEditChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEdit(event.target.checked)\r\n    }\r\n\r\n    const handleSave = () => {\r\n        console.log(localJson)\r\n        console.log(localUi)\r\n        onJsonChange(localJson)\r\n        onUiChange(localUi)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                schema={json_schema as any}\r\n                uiSchema={ui_schema}\r\n                widgets={widgets}\r\n                onSubmit={(formData) => console.log(formData.formData)}\r\n            />\r\n            <br/>\r\n            <Switch\r\n                checked={edit}\r\n                onChange={handleEditChange}\r\n                name=\"checkedA\"\r\n                inputProps={{'aria-label': 'secondary checkbox'}}\r\n            />\r\n            {edit && <Button color={\"primary\"} variant={\"contained\"} onClick={handleSave}>Save Schemas</Button>}\r\n            {edit && <Typography variant={\"h6\"} color={\"error\"}>\r\n                Осторожно: можно легко удалить всю проделанную работу\r\n            </Typography>}\r\n            <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"JSON\"\r\n                multiline\r\n                fullWidth\r\n                defaultValue=\"Default Value\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                    readOnly: !edit,\r\n                }}\r\n                value={localJson}\r\n                onChange={handleJsonSchemaChange}\r\n                style={{marginTop: 15, marginBottom: 15}}\r\n            />\r\n            <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"UI\"\r\n                multiline\r\n                fullWidth\r\n                defaultValue=\"Default Value\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                    readOnly: !edit,\r\n                }}\r\n                value={localUi}\r\n                onChange={handleUiSchemaChange}\r\n                style={{marginTop: 15, marginBottom: 30}}\r\n            />\r\n            <br/>\r\n            <Button onClick={copyToClipboard} variant={\"contained\"} color={\"primary\"} style={{marginBottom: 15}}>Copy\r\n                FUL STAGE to Clipboard</Button>\r\n            <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"FULL STAGE\"\r\n                multiline\r\n                fullWidth\r\n                defaultValue=\"Default Value\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                    readOnly: true,\r\n                }}\r\n                value={stage_data}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview","// import React from 'react'\r\n\r\n// const CardBody = (props: any) => {\r\n//     const handleChange = (event: any) => {\r\n//         props.onChange({...props.parameters, default: event.target.checked})\r\n//     }\r\n//     return (\r\n//         <div>\r\n//             <input type=\"checkbox\" id=\"multiple\"\r\n//                    value={props.parameters.default}\r\n//                    onChange={handleChange}\r\n//             />\r\n//             <label htmlFor=\"multiple\">Multiple files</label>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nconst CustomFileType = {\r\n    file: {\r\n        displayName: \"File\",\r\n        matchIf: [\r\n            {\r\n                types: [\"string\"],\r\n                widget: \"customfile\"\r\n            },\r\n        ],\r\n        defaultDataSchema: {},\r\n        defaultUiSchema: {\r\n            \"ui:widget\": \"customfile\"\r\n        },\r\n        type: \"string\",\r\n        // cardBody: CardBody,\r\n        // modalBody: (parameters: any, onChange: any) => <div>\r\n        //     Extra editing options in modal appear hear\r\n        // </div>,\r\n    }\r\n};\r\n\r\nexport default CustomFileType","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Editor} from '@tinymce/tinymce-react';\r\n\r\nconst DocBuilder = (props: {data: string, handleChange: (d: string) => void}) => {\r\n    const {data, handleChange} = props;\r\n    const editorRef = useRef<any>(null);\r\n    const [docData, setDocData] = useState(\"\")\r\n    const useDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    const handleDataChange = (d:string) => {\r\n        // console.log(d)\r\n        setDocData(d)\r\n        handleChange(d)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDocData(data)\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block', padding: 10}}>\r\n            <Editor\r\n                id={\"EditorTinyMCE\"}\r\n                onEditorChange={(newValue, editor) => handleDataChange(newValue)}\r\n                value={docData}\r\n                tinymceScriptSrc={process.env.PUBLIC_URL + '/tinymce/tinymce.min.js'}\r\n                onInit={(evt, editor) => editorRef.current = editor}\r\n                init={{\r\n                    plugins: 'autosave save print preview paste importcss searchreplace autolink directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap emoticons autoresize',\r\n                    menubar: 'file edit view insert format tools table help',\r\n                    toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media link anchor codesample | ltr rtl',\r\n                    toolbar_sticky: true,\r\n                    image_advtab: true,\r\n                    importcss_append: true,\r\n                    image_caption: true,\r\n                    noneditable_noneditable_class: 'mceNonEditable',\r\n                    toolbar_mode: 'sliding',\r\n                    contextmenu: 'link image imagetools table',\r\n                    autosave_prefix: 'tinymce-autosave-{path}{query}-',\r\n                    save_onsavecallback: function (a:any) { console.log(a); },\r\n                    // skin: useDarkMode ? 'oxide-dark' : 'oxide',\r\n                    // content_css: useDarkMode ? 'dark' : 'default',\r\n                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default DocBuilder","import React, {useEffect, useState} from \"react\";\r\n// @ts-ignore\r\nimport {FormBuilder} from '@ginkgo-bioworks/react-json-schema-form-builder';\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport StageOptions from '../../json-schema/StageOptions_v2.json'\r\nimport {useParams} from \"react-router-dom\";\r\nimport {JSONSchema7} from \"json-schema\";\r\nimport PreviewStage from './PreviewStage'\r\nimport CustomFileType from '../custom-widgets/file-widget/CustomFileType'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"../../util/Axios\";\r\nimport {taskstagesUrl} from \"../../util/Urls\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport {RouterParams} from \"../../util/Types\";\r\nimport DocBuilder from \"./DocBuilder\";\r\nimport {Editor} from \"@tinymce/tinymce-react\";\r\n\r\n\r\nconst Builder = () => {\r\n    let {id, chainId} = useParams<RouterParams>();\r\n\r\n    const [schema, setSchema] = useState('')\r\n    const [uiSchema, setUiSchema] = useState('')\r\n    const [optionsSchema, setOptionsSchema] = useState<{ [index: string]: any }>(StageOptions)\r\n    const [formResponses, setFormResponses] = useState<{ [index: string]: any }>({})\r\n    const [preview, setPreview] = useState(false)\r\n    const [editorView, setEditorView] = useState(false)\r\n    const [editorData, setEditorData] = useState(\"\")\r\n\r\n    // const [existingRanks, setExistingRanks] = useState<any[]>([])\r\n    // const [isByRanks, setIsByRanks] = useState<boolean>(true)\r\n    // const [recipients, setRecipients] = useState<string[]>([])\r\n    // const [allInStages, setAllInStages] = useState<string[]>([])\r\n    // const [ranksLimits, setRanksLimits] = useState([])\r\n\r\n    useEffect(() => {\r\n        /*const getAllInStages = (prevTask: number[], previousStages: number[]) => {\r\n            if (prevTask[0]) {\r\n                axios.get(taskstagesUrl + prevTask[0] + '/')\r\n                    .then(res => res.data)\r\n                    .then(res => {\r\n                        let previousInStage = res.in_stages;\r\n                        if (previousInStage[0]) {\r\n                            previousStages.push(previousInStage[0])\r\n                            getAllInStages(res.in_stages, previousStages)\r\n                        } else {\r\n                            setAllInStages(previousStages.map(String))\r\n                        }\r\n                    })\r\n            }\r\n        }*/\r\n        /* const getAllRanks = () => {\r\n            axios.get(ranksUrl)\r\n                .then(res => res.data).then(res => {\r\n                setExistingRanks(res)\r\n            })\r\n        }*/\r\n        const getStage = () => {\r\n            axios.get(taskstagesUrl + id + '/')\r\n                .then(res => res.data)\r\n                .then(res => {\r\n                    const {id, json_schema, ui_schema, rich_text, ...options} = res\r\n\r\n                    // let parse_json_schema = JSON.parse(json_schema)\r\n                    // let parse_ui_schema = JSON.parse(ui_schema)\r\n                    // console.log(parse_json_schema)\r\n                    // console.log(parse_ui_schema)\r\n                    // // getAllInStages(res.in_stages, res.in_stages)\r\n                    setSchema(json_schema)\r\n                    setUiSchema(ui_schema)\r\n                    setFormResponses(options)\r\n                    setEditorData(rich_text)\r\n                })\r\n        }\r\n\r\n        if (id) {\r\n            getStage()\r\n            // getAllRanks()\r\n        }\r\n    }, [id])\r\n\r\n    /*function formPropsForSchema(arrayOfNames: string[]) {\r\n        let propsForSchema: { [index: string]: { [index: string]: string } } = {};\r\n        arrayOfNames.forEach((rank, index, array) => {\r\n            propsForSchema[index.toString()] = {title: rank, type: \"boolean\"}\r\n        })\r\n        return propsForSchema;\r\n    }\r\n\r\n    const getRanksLimits = () => {\r\n            axios.get(rankslimitsUrl)\r\n                .then(res => res.data)\r\n                .then(res => {\r\n                    setRanksLimits(res)\r\n                })\r\n        }\r\n\r\n    useEffect(() => {\r\n        if (formResponses) {\r\n            let transition: { [index: string]: { [index: string]: any } } = formResponses['transition']\r\n            if (transition) {\r\n                let sentBy = transition['assign_user_by']\r\n                if (sentBy) {\r\n                    let whichSent: string = formResponses['transition']['assign_user_by'];\r\n                    if (whichSent === 'ranks') {\r\n                        getRanksLimits()\r\n                        setIsByRanks(true)\r\n                    } else if (whichSent === 'prevStage') {\r\n                        setRanksLimits([])\r\n                        setIsByRanks(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [formResponses])\r\n\r\n    useEffect(() => {\r\n        if (existingRanks) {\r\n            let propExistingRanks = formPropsForSchema(existingRanks.map(item => item.name));\r\n            let newOptionSchema = optionsSchema;\r\n            newOptionSchema.properties.transition.dependencies.assign_user_by.oneOf[0].properties.ranks.properties = propExistingRanks;\r\n            setOptionsSchema(newOptionSchema)\r\n        }\r\n    }, [existingRanks])\r\n\r\n    useEffect(() => {\r\n        let propPrevInStages = formPropsForSchema(allInStages);\r\n        let newOptionSchema = optionsSchema;\r\n        newOptionSchema.properties.transition.dependencies.assign_user_by.oneOf[1].properties.by_previous_stages.properties = propPrevInStages;\r\n        setOptionsSchema(newOptionSchema)\r\n    }, [allInStages])*/\r\n\r\n    const handleSubmit = () => {\r\n        let json_schema = null\r\n        let ui_schema = null\r\n        if (schema && uiSchema) {\r\n            // json_schema = JSON.parse(schema)\r\n            // ui_schema = JSON.parse(uiSchema)\r\n            json_schema = schema\r\n            ui_schema = uiSchema\r\n        }\r\n        /*let transition: { [key: string]: string | any } = formResponses['transition'];\r\n\r\n        if (transition['assign_user_by'] === 'ranks') {\r\n            // debugger\r\n            existingRanks.forEach((item, index, array) => {\r\n                if (transition['ranks'][index]) {\r\n                    let formdata = {\r\n                        open_limit: 0,\r\n                        total_limit: 0,\r\n                        list_permission: false,\r\n                        close_submission: false,\r\n                        close_selection: false,\r\n                        stage: +id,\r\n                        rank: item['id']\r\n                    }\r\n\r\n                    let existingRank: boolean[] = [];\r\n                    ranksLimits.forEach((rankLimit) => {\r\n                        if (rankLimit['rank'] === item['id'] && rankLimit['stage'] === +id) {\r\n                            existingRank.push(true)\r\n                        } else {\r\n                            existingRank.push(false)\r\n                        }\r\n                    })\r\n\r\n                    if (existingRank.includes(false) || !(ranksLimits.length != 0)) {\r\n                        axios\r\n                            .post(rankslimitsUrl, formdata)\r\n                            // .then((res: any) => alert(\"Saved\"))\r\n                            .catch((err: any) => alert(err));\r\n                    }\r\n\r\n                } else {\r\n                    ranksLimits.forEach((rankLimit) => {\r\n                        // console.log(rankLimit['rank'], item['id'])\r\n                        // console.log(rankLimit['stage'], +id)\r\n                        // console.log('========')\r\n                        if (rankLimit['rank'] === item['id'] && rankLimit['stage'] === +id) {\r\n                            axios\r\n                                .delete(rankslimitsUrl + rankLimit['id'] + '/')\r\n                                // .then((res: any) => alert(\"Delete rankLimit for \" + item['name'] + \" rank\"))\r\n                                .catch((err: any) => alert(err));\r\n                        }\r\n                    })\r\n\r\n                }\r\n            })\r\n        } else if (transition['assign_user_by'] === 'prevStage') {\r\n        }*/\r\n        let {chain, ...responses} = formResponses\r\n        let data = {...responses, json_schema: json_schema, ui_schema: ui_schema, rich_text: editorData}\r\n        console.log(JSON.stringify(data))\r\n        axios\r\n            .patch(taskstagesUrl + id + '/', data)\r\n            .then((res: any) => alert(\"Saved\"))\r\n            .catch((err: any) => alert(err));\r\n    }\r\n\r\n    const changePreviewMode = () => {\r\n        setPreview(p => !p)\r\n    }\r\n\r\n    const handleJsonSchemaChange = (schema: string) => {\r\n        // let parsed = JSON.parse(schema)\r\n        setSchema(schema)\r\n    }\r\n\r\n    const handleUiSchemaChange = (schema: string) => {\r\n        // let parsed = JSON.parse(schema)\r\n        setUiSchema(schema)\r\n    }\r\n\r\n    const handleEditorChange = (d: string) => {\r\n        console.log(d)\r\n        setEditorData(d)\r\n    }\r\n\r\n    const handleEditorViewMode = () => {\r\n        setEditorView(!editorView)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{display: 'block', float: 'right'}}>\r\n                <IconButton onClick={handleEditorViewMode}>\r\n                    <CreateIcon fontSize={\"large\"}/>\r\n                </IconButton>\r\n                <IconButton onClick={changePreviewMode}>\r\n                    {!preview ?\r\n                        <VisibilityIcon fontSize={\"large\"}/>\r\n                        :\r\n                        <VisibilityOffIcon fontSize={\"large\"}/>\r\n                    }\r\n                </IconButton>\r\n            </div>\r\n            {!preview ?\r\n                <div>\r\n                    {editorView ?\r\n                        <DocBuilder data={editorData} handleChange={handleEditorChange}/>\r\n                        :\r\n                        <FormBuilder\r\n                            schema={schema}\r\n                            uischema={uiSchema}\r\n                            onChange={(newSchema: string, newUiSchema: string) => {\r\n                                setSchema(newSchema)\r\n                                setUiSchema(newUiSchema)\r\n                            }}\r\n                            mods={\r\n                                {\r\n                                    customFormInputs: {...CustomFileType}\r\n                                }\r\n                            }\r\n                        />}\r\n                    <div style={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block', padding: 10}}>\r\n                        <Form\r\n                            schema={optionsSchema as JSONSchema7}\r\n                            formData={formResponses}\r\n                            onChange={(e: { formData: object }) => setFormResponses(e.formData)}\r\n                            onSubmit={handleSubmit}\r\n                        />\r\n                    </div>\r\n                    {/*<div>\r\n                        {JSON.stringify(ranksLimits)}\r\n                    </div>*/}\r\n\r\n\r\n                </div>\r\n                :\r\n                <div style={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block', padding: 10}}>\r\n                    {editorView ?\r\n                        <Editor\r\n                            id={\"ViewerTinyMCE\"}\r\n                            value={editorData}\r\n                            toolbar={false}\r\n                            inline={false}\r\n                            disabled={true}\r\n                            tinymceScriptSrc={process.env.PUBLIC_URL + '/tinymce/tinymce.min.js'}\r\n                            init={{\r\n                                plugins: 'autoresize',\r\n                                menubar: false,\r\n                                image_advtab: true,\r\n                                importcss_append: true,\r\n                            }}\r\n                        />\r\n                        :\r\n                        <PreviewStage\r\n                            jsonSchema={schema}\r\n                            uiSchema={uiSchema}\r\n                            formResponses={formResponses}\r\n                            onJsonChange={handleJsonSchemaChange}\r\n                            onUiChange={handleUiSchemaChange}\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Builder\r\n\r\n\r\n","import {retrieveSchema, toPathSchema} from \"@rjsf/core/lib/utils\";\r\nimport _get from \"lodash/get\";\r\nimport _isEmpty from \"lodash/isEmpty\";\r\n\r\n/**\r\n * Get flatten fields from schema\r\n * @param schema\r\n * @param formData\r\n * @returns {*[]}\r\n */\r\nconst getFormFields = (schema, formData = {}) => {\r\n    const retrievedSchema = retrieveSchema(\r\n        schema\r\n    );\r\n\r\n    const pathSchema = toPathSchema(\r\n        retrievedSchema,\r\n        \"\",\r\n        schema,\r\n        formData\r\n    );\r\n\r\n    const getFieldNames = (pathSchema, formData) => {\r\n        const getAllPaths = (_obj, acc = [], paths = [\"\"]) => {\r\n            Object.keys(_obj).forEach(key => {\r\n                if (typeof _obj[key] === \"object\") {\r\n                    let newPaths = paths.map(path => `${path}.${key}`);\r\n                    // If an object is marked with additionalProperties, all its keys are valid\r\n                    if (_obj[key].__rjsf_additionalProperties && _obj[key].$name !== \"\") {\r\n                        acc.push(_obj[key].$name);\r\n                    } else {\r\n                        getAllPaths(_obj[key], acc, newPaths);\r\n                    }\r\n                } else if (key === \"$name\" && _obj[key] !== \"\") {\r\n                    paths.forEach(path => {\r\n                        path = path.replace(/^\\./, \"\");\r\n                        const formValue = _get(formData, path);\r\n                        // adds path to fieldNames if it points to a value\r\n                        // or an empty object/array\r\n                        if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\r\n                            acc.push(path);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            return acc;\r\n        };\r\n        return getAllPaths(pathSchema);\r\n    };\r\n\r\n    return getFieldNames(pathSchema, formData);\r\n};\r\n\r\nexport default getFormFields","import React, {useEffect, useState} from \"react\";\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {JSONSchema7} from \"json-schema\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport axios from '../../util/Axios'\r\nimport {conditionalstagesUrl, taskstagesUrl} from \"../../util/Urls\";\r\nimport GetFormFields from './GetFormFields'\r\nimport getFormFields from './GetFormFields'\r\nimport {RouterParams} from \"../../util/Types\";\r\n\r\n\r\nconst Builder = () => {\r\n    const {id} = useParams<RouterParams>();\r\n\r\n    const [ready, setReady] = useState(false)\r\n    const [fields, setFields] = useState<string[]>([]);\r\n    const [schema, setSchema] = useState<{}>({})\r\n    const [formResponses, setFormResponses] = useState({})\r\n    const [connectedStages, setConnectedStages] = useState<any[]>()\r\n    const [pingPong, setPingPong] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        // Get current stage's data\r\n        axios.get(conditionalstagesUrl + id + '/').then(res => res.data).then(currentStage => {\r\n            setFormResponses(currentStage.conditions)\r\n            setPingPong(currentStage.pingpong)\r\n            console.log(\"PING PONG\", currentStage.pingpong)\r\n        })\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        const getStage = (stageId?: number | string) => {\r\n            if (stageId) {\r\n                let taskStage = axios.get(taskstagesUrl + stageId + '/').then(res => res.data)\r\n                if (taskStage) {\r\n                    return taskStage\r\n                } else {\r\n                    return axios.get(conditionalstagesUrl + stageId + '/').then(res => res.data)\r\n                }\r\n            }\r\n            return axios.get(conditionalstagesUrl + id + '/').then(res => res.data)\r\n        }\r\n\r\n        const getConnectedStages = async (ids: number[]) => {\r\n            return ids.map(async connId => {\r\n                let stage = await getStage(connId)\r\n                return {[connId]: stage}\r\n            })\r\n        }\r\n\r\n        const getData = async () => {\r\n            let currentStage = await getStage()\r\n\r\n            let connectedIds: undefined\r\n            if (pingPong) {\r\n                connectedIds = currentStage.out_stages\r\n            } else {\r\n                connectedIds = currentStage.in_stages\r\n            }\r\n            if (connectedIds) {\r\n                let connStages = await getConnectedStages(connectedIds)\r\n                Promise.all(connStages).then(res => {\r\n                    if (Object.keys(res).length > 0) {\r\n                        setConnectedStages(res)\r\n                        setReady(true)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            // noinspection JSIgnoredPromiseFromCall\r\n            getData()\r\n        }\r\n\r\n    }, [id, pingPong])\r\n\r\n    useEffect(() => {\r\n        /**\r\n         * Get fields from dependencies\r\n         * @param dep\r\n         * @returns {any}\r\n         */\r\n        const getDependentFields = (dep: any) => {\r\n            let data = null\r\n            if (dep.hasOwnProperty(\"oneOf\")) {\r\n                data = dep.oneOf\r\n            }\r\n            if (dep.hasOwnProperty(\"allOf\")) {\r\n                data = dep.allOf\r\n            }\r\n            if (data) {\r\n                return data.map((nested: any) => {\r\n                    let fiction = {type: \"object\", ...nested}\r\n                    return getFormFields(fiction)\r\n                }).flat()\r\n            }\r\n            return []\r\n        }\r\n\r\n        if (connectedStages && connectedStages.length > 0) {\r\n            const allFields = connectedStages.map(stageObject => {\r\n                let stage = Object.values(stageObject)[0] as any\r\n                let stageSchema = JSON.parse(stage.json_schema)\r\n\r\n                // Get dependencies from stage's schema\r\n                let deps = {}\r\n                if (stageSchema && stageSchema.dependencies && Object.keys(stageSchema.dependencies).length > 0) {\r\n                    deps = stageSchema.dependencies\r\n                }\r\n\r\n                // Get fields from schema's properties and dependencies\r\n                let stageFields = GetFormFields(stageSchema)\r\n                let depValues = Object.values(deps)\r\n                if (depValues.length > 0) {\r\n                    let depFields = depValues.map((dep: any) => getDependentFields(dep)).flat()\r\n                    stageFields = Array.from(new Set([...fields, ...depFields]))\r\n                }\r\n\r\n                return stageFields\r\n            }).flat()\r\n\r\n            setFields(allFields)\r\n        }\r\n    }, [pingPong, connectedStages])\r\n\r\n    useEffect(() => {\r\n        setSchema({\r\n            items: {\r\n                type: 'object',\r\n                title: 'Logic',\r\n                properties: {\r\n                    field: {\r\n                        enum: fields,\r\n                        title: 'Field',\r\n                        type: 'string'\r\n                    },\r\n                    condition: {\r\n                        enum: [\r\n                            '==',\r\n                            '!=',\r\n                            '>',\r\n                            '<',\r\n                            '>=',\r\n                            '<=',\r\n                            'ARRAY-CONTAINS',\r\n                            'ARRAY-CONTAINS-NOT'\r\n                        ],\r\n                        title: 'Condition',\r\n                        type: 'string'\r\n                    },\r\n                    value: {\r\n                        title: 'Value',\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                dependencies: {},\r\n                required: []\r\n            },\r\n            title: 'Logic Array',\r\n            type: 'array',\r\n            dependencies: {},\r\n            required: []\r\n        })\r\n    }, [fields])\r\n\r\n    const handleSubmit = () => {\r\n        let data = {conditions: formResponses, pingpong: pingPong}\r\n        console.log(formResponses)\r\n\r\n        axios\r\n            .patch(conditionalstagesUrl + id + '/', data)\r\n            .then((res: any) => alert(\"Saved\"))\r\n            .catch((err: any) => alert(err));\r\n    }\r\n\r\n    const handleChangePingPong = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPingPong(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div style={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block', padding: 10}}>\r\n            {ready ?\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={pingPong} onChange={handleChangePingPong} name=\"PingPong\"\r\n                                           color=\"primary\"/>}\r\n                        label=\"Ping Pong\"\r\n                    />\r\n                    <Form\r\n                        schema={schema as JSONSchema7}\r\n                        formData={formResponses}\r\n                        onChange={(e: { formData: object }) => setFormResponses(e.formData)}\r\n                        onSubmit={handleSubmit}/>\r\n                </div>\r\n                :\r\n                <p>No node connection or end_ui detected. Connect to one or check if form has fields.</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Builder\r\n\r\n\r\n","import React from \"react\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\n\r\nimport {Button, Grid} from '@material-ui/core'\r\nimport axios from \"../../util/Axios\";\r\n\r\nimport {casesUrl, tasksUrl} from '../../util/Urls'\r\nimport {RouterParams} from \"../../util/Types\";\r\n\r\nconst Builder = () => {\r\n    let {id, chainId} = useParams<RouterParams>();\r\n    const history = useHistory();\r\n\r\n    const handleCreateStage = () => {\r\n        let location = history.location.pathname.split('/actions')[0]\r\n        console.log(location)\r\n        history.push(`${location}/createstage/${id}`)\r\n    }\r\n\r\n    const handleCreateTask = async () => {\r\n        let location = history.location.pathname.split('/actions')[0]\r\n        let caseData = await axios.post(casesUrl, {chain: chainId})\r\n            .then(res => res.data)\r\n        console.log(caseData)\r\n        let taskData = await axios.post(tasksUrl, {case: caseData.id, stage: id})\r\n            .then(res => res.data)\r\n        console.log(taskData)\r\n        history.push(`${location}/task/${taskData.id}`)\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid container justify=\"center\" style={{background: '#7FB3D5'}} component={\"div\"}>\r\n                <Grid item style={{margin: 20}}>\r\n                    <Button onClick={handleCreateStage}>Create Form</Button>\r\n                </Grid>\r\n                <Grid item style={{margin: 20}}>\r\n                    <Button onClick={handleCreateTask}>Create Task (for test)</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Builder","import React, {useEffect, useState} from \"react\";\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"../../util/Axios\";\r\nimport {taskstagesUrl, tasksUrl} from '../../util/Urls'\r\nimport {RouterParams} from \"../../util/Types\";\r\n\r\n\r\nconst Builder = () => {\r\n    const [schema, setSchema] = useState({})\r\n    const [uiSchema, setUiSchema] = useState({})\r\n    const [formResponses, setFormResponses] = useState({})\r\n    let {id} = useParams<RouterParams>();\r\n\r\n    useEffect(() => {\r\n        const getTask = () => {\r\n            return axios.get(tasksUrl + id).then(res => res.data)\r\n        }\r\n        const getStage = (stageId: string | number) => {\r\n            return axios.get(taskstagesUrl + stageId).then(res => res.data)\r\n        }\r\n        const setFormData = async () => {\r\n            let task = await getTask()\r\n            let stage = await getStage(task.stage)\r\n            console.log(task, stage)\r\n            setFormResponses(task.responses)\r\n            setSchema(stage.json_schema)\r\n            setUiSchema(stage.ui_schema)\r\n        }\r\n        if (id) {\r\n            setFormData()\r\n        }\r\n    }, [id])\r\n\r\n    const handleSubmit = () => {\r\n        console.log(formResponses)\r\n        let data = {responses: formResponses}\r\n        axios.patch(tasksUrl + id, data)\r\n    }\r\n\r\n    return (\r\n        <div style={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block', padding: 10}}>\r\n            <Form\r\n                schema={schema}\r\n                uiSchema={uiSchema}\r\n                formData={formResponses}\r\n                onChange={(e) => setFormResponses(e.formData)}\r\n                onSubmit={handleSubmit}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Builder\r\n\r\n\r\n","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCXiwOUNsbzKH7sbSAZrqA9f7VOeCMdUOQ\",\r\n    authDomain: \"gigaturnip-b6b5b.firebaseapp.com\",\r\n    projectId: \"gigaturnip-b6b5b\",\r\n    storageBucket: \"gigaturnip-b6b5b.appspot.com\",\r\n    messagingSenderId: \"414429242328\",\r\n    appId: \"1:414429242328:web:a4685f5ac6895ea767c8ad\",\r\n    measurementId: \"G-Y8JTEJMTET\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// const db = firebase.firestore();\r\n// if (window.location.hostname === \"localhost\") {\r\n//   db.useEmulator(\"localhost\", 8080);\r\n// }\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nfirebase.firestore().settings({\r\n    ignoreUndefinedProperties: true,\r\n})\r\nexport const signInWithGoogle = () => {\r\n    provider.setCustomParameters({\r\n        prompt: 'select_account'\r\n    });\r\n    return firebase.auth().signInWithPopup(provider);\r\n};\r\n\r\nexport const signOut = () => {\r\n    return firebase.auth().signOut()\r\n        .then(() => localStorage.removeItem(\"token\"))\r\n        .then(() => window.location.reload())\r\n}\r\n\r\nexport default firebase;","import React, {useEffect, useState} from \"react\";\r\nimport firebase from \"./Firebase\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({children}) => {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                setCurrentUser(user)\r\n                user.getIdToken(true).then((idToken) => {\r\n                    localStorage.setItem(\"token\", idToken);\r\n                })\r\n            }\r\n        });\r\n        firebase.auth().onIdTokenChanged(user => {\r\n            if (user) {\r\n                user.getIdToken(false).then((idToken) => {\r\n                    localStorage.setItem(\"token\", idToken);\r\n                })\r\n            }\r\n        })\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                currentUser\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {createStyles, makeStyles, Theme, useTheme} from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\n\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CssBaseline,\r\n    Drawer,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {signInWithGoogle, signOut} from '../../util/Firebase';\r\nimport {AuthContext} from \"../../util/Auth\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport axios from '../../util/Axios';\r\n\r\nimport {campaignsUrl} from '../../util/Urls';\r\nimport { AppbarParams, CampaignParams } from '../../util/Types';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        drawerOpen: {\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerClose: {\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            overflowX: 'hidden',\r\n            width: theme.spacing(7) + 1,\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9) + 1,\r\n            },\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            // necessary for content to be below app bar\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            // padding: theme.spacing(3),\r\n        },\r\n        title: {\r\n            flexGrow: 1\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            alignItems: 'center'\r\n            // minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        select: {},\r\n        selectIcon: {\r\n            fill: 'white',\r\n            top: 'calc(50% - 14px)'\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nconst Appbar = (props: AppbarParams) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const history = useHistory();\r\n    const {campaignId} = useParams<{ campaignId: string }>();\r\n    const {currentUser} = useContext(AuthContext)\r\n    const {children} = props;\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [campaign, setCampaign] = useState<number | string | unknown>(campaignId);\r\n    const [allCampaigns, setAllCampaigns] = useState<CampaignParams[]>([])\r\n\r\n    console.log(\"CURRENT CAMPAIGN\", campaignId)\r\n\r\n    useEffect(() => {\r\n        axios.get(campaignsUrl)\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                console.log(res)\r\n                setAllCampaigns(res)\r\n            })\r\n    }, [])\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOptionClick = (page: string) => {\r\n        history.push(`/campaign/${campaignId}/${page}`)\r\n    };\r\n\r\n    const handleCampaignChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let value = event.target.value;\r\n        console.log(value)\r\n        setCampaign(value)\r\n        history.push(`/campaign/${value}`)\r\n    }\r\n\r\n    const redirectToMain = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap style={{cursor: \"pointer\"}} onClick={redirectToMain}>\r\n                        GigaTurnip Admin\r\n                    </Typography>\r\n                    <Grid className={classes.title} />\r\n                    <FormControl className={classes.formControl} size=\"small\">\r\n                        <Select\r\n                            className={classes.select}\r\n                            autoWidth\r\n                            labelId=\"campaign-select-label\"\r\n                            id=\"campaign-select-label\"\r\n                            value={campaign}\r\n                            onChange={handleCampaignChange}\r\n                            label=\"Campaign\"\r\n                            disableUnderline\r\n                            style={{color: 'white'}}\r\n                            inputProps={{\r\n                                classes: {\r\n                                    icon: classes.selectIcon,\r\n                                },\r\n                            }}\r\n                        >\r\n                            {allCampaigns.map(camp => <MenuItem key={`${camp.name}_${camp.id}`}\r\n                                                                value={camp.id}>{camp.name}</MenuItem>)}\r\n                        </Select>\r\n                    </FormControl>\r\n                    {currentUser ?\r\n                        <Button onClick={signOut} color={\"inherit\"}>\r\n                            Log out\r\n                        </Button>\r\n                        :\r\n                        <Button onClick={signInWithGoogle} color={\"inherit\"}>\r\n                            Login\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    {/*<ListItem button onClick={() => handleOptionClick(\"manual\")}>*/}\r\n                    {/*    <ListItemIcon><MenuBookIcon/></ListItemIcon>*/}\r\n                    {/*    <ListItemText primary={\"Manual\"}/>*/}\r\n                    {/*</ListItem>*/}\r\n                    <ListItem button onClick={() => handleOptionClick(\"chain\")}>\r\n                        <ListItemIcon><InboxIcon/></ListItemIcon>\r\n                        <ListItemText primary={\"Chains\"}/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar}/>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Appbar\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {CardParams} from \"../../util/Types\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n        // height: 200\r\n    },\r\n    extra: {\r\n        marginBottom: 15\r\n    }\r\n});\r\n\r\nconst ParentCard = (props: CardParams) => {\r\n    const classes = useStyles();\r\n    const {id, name, description, campaign} = props.data;\r\n    const {onCardButtonClick} = props;\r\n\r\n    const handleOpen = () => {\r\n        onCardButtonClick(id)\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" gutterBottom={true}>\r\n                    {name}\r\n                </Typography>\r\n                <Typography className={classes.extra} variant=\"subtitle2\" color=\"textSecondary\">\r\n                    ID: {id} {campaign && `Campaign: ${campaign}`}\r\n                </Typography>\r\n                <Typography variant=\"body1\" component=\"p\">\r\n                    {description ? description : <br/>}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" onClick={handleOpen}>Open</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ParentCard","import React, {useState} from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContent,\r\n    Grid,\r\n    TextField,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport {DialogParams} from \"../../util/Types\";\r\n\r\n\r\nconst ParentDialog = (props: DialogParams) => {\r\n    const {title, onClose, onSave, open} = props;\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n\r\n    const handleSave = () => {\r\n        let data = {name, description}\r\n        onSave(data)\r\n    }\r\n\r\n    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.target.value\r\n        if (value) {\r\n            setName(value)\r\n        } else {\r\n            setName('')\r\n        }\r\n    };\r\n\r\n    const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.target.value\r\n        if (value) {\r\n            setDescription(value)\r\n        } else {\r\n            setDescription('')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle>{title}</DialogTitle>\r\n            <DialogContent>\r\n                <Grid container justify={\"center\"}>\r\n                    <Grid container item><TextField fullWidth label={\"Name\"} onChange={handleNameChange}/></Grid>\r\n                    <Grid container item>\r\n                        <TextField fullWidth label={\"Description\"} multiline rows={4}\r\n                                   onChange={handleDescriptionChange}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleSave}>Save</Button>\r\n                <Button onClick={handleClose}>Close</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default ParentDialog","import React, {useEffect, useState} from \"react\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport axios from \"../../util/Axios\";\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport Card from \"../cards/Card\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {chainsUrl} from '../../util/Urls'\r\nimport Dialog from '../dialogs/Dialog'\r\nimport {ChainParams, CreateChainParams, RouterParams} from \"../../util/Types\";\r\n\r\nconst Builder = () => {\r\n    const history = useHistory()\r\n    const [chains, setChains] = useState<ChainParams[]>([])\r\n    const [open, setOpen] = useState(false);\r\n    const {campaignId} = useParams<RouterParams>()\r\n\r\n    useEffect(() => {\r\n        axios.get(chainsUrl)\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                console.log(res)\r\n                const filtered = res.filter((chain: ChainParams) => chain.campaign?.toString() === campaignId)\r\n                setChains(filtered)\r\n            })\r\n    }, [campaignId])\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDialogSave = (data: any) => {\r\n        if (data.name && campaignId) {\r\n            let parsedData = {...data, campaign: parseInt(campaignId)}\r\n            handleAddChain(parsedData)\r\n            setOpen(false);\r\n        }\r\n        else {\r\n            alert('error: No name or campaign')\r\n        }\r\n    }\r\n\r\n    const handleAddChain = (data: CreateChainParams) => {\r\n        console.log(data)\r\n        axios.post(chainsUrl, data)\r\n            .then(res => {\r\n                console.log(res)\r\n                window.location.reload();\r\n            })\r\n    };\r\n\r\n    const handleCardRedirect = (id: string | number) => {\r\n        history.push(`${history.location.pathname}/${id}`)\r\n    }\r\n\r\n    return (\r\n        <Grid container justify={\"center\"}>\r\n            <Dialog title={\"Add Chain\"} open={open} onSave={handleDialogSave} onClose={handleClose}/>\r\n            <Grid container style={{padding: 20}}>\r\n                <Button variant={\"contained\"} color={\"primary\"} startIcon={<AddIcon/>} onClick={handleClickOpen}>Add\r\n                    Chain</Button>\r\n            </Grid>\r\n            {chains.map(chain => (\r\n                <Grid item style={{padding: 10}} key={chain.id}>\r\n                    <Card data={chain} onCardButtonClick={handleCardRedirect} />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Builder\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport axios from \"../../util/Axios\";\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport Card from \"../cards/Card\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {campaignsUrl} from \"../../util/Urls\"\r\nimport Dialog from '../dialogs/Dialog'\r\nimport {CampaignParams, CreateCampaignParams} from \"../../util/Types\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst Builder = () => {\r\n    const [campaigns, setCampaigns] = useState<CampaignParams[]>([])\r\n    const [open, setOpen] = useState(false);\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        axios.get(campaignsUrl)\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                console.log(res)\r\n                setCampaigns(res)\r\n            })\r\n    }, [])\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleDialogSave = (data: any) => {\r\n        if (data.name) {\r\n            handleCampaignAdd(data)\r\n            setOpen(false);\r\n        } else {\r\n            alert('error: No name')\r\n        }\r\n    }\r\n\r\n    const handleCampaignAdd = (data: CreateCampaignParams) => {\r\n        axios.post(campaignsUrl, data)\r\n            .then(res => {\r\n                console.log(res)\r\n                window.location.reload();\r\n            })\r\n    };\r\n\r\n    const handleCardRedirect = (id: string | number) => {\r\n        history.push(`/campaign/${id}`)\r\n    }\r\n\r\n    return (\r\n        <Grid container justify={\"center\"}>\r\n            <Dialog title={\"Add campaign\"} open={open} onSave={handleDialogSave} onClose={handleClose}/>\r\n            <Grid container style={{padding: 20}}>\r\n                <Button variant={\"contained\"} color={\"primary\"} startIcon={<AddIcon/>} onClick={handleClickOpen}>Add\r\n                    Campaign</Button>\r\n            </Grid>\r\n            {campaigns.map(campaign => (\r\n                <Grid item style={{padding: 10}}>\r\n                    <Card key={campaign.id} data={campaign} onCardButtonClick={handleCardRedirect}/>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Builder\r\n\r\n\r\n","import React, {useContext} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {AppBar, Button, CssBaseline, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {signInWithGoogle, signOut} from '../../util/Firebase';\r\nimport {AuthContext} from \"../../util/Auth\";\r\nimport {AppbarParams} from \"../../util/Types\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            marginLeft: drawerWidth,\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            transition: theme.transitions.create(['width', 'margin'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: 36,\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n            whiteSpace: 'nowrap',\r\n        },\r\n        drawerOpen: {\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerClose: {\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            overflowX: 'hidden',\r\n            width: theme.spacing(7) + 1,\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: theme.spacing(9) + 1,\r\n            },\r\n        },\r\n        toolbar: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-end',\r\n            padding: theme.spacing(0, 1),\r\n            // necessary for content to be below app bar\r\n            ...theme.mixins.toolbar,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            // padding: theme.spacing(3),\r\n        },\r\n        title: {\r\n            flexGrow: 1\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nconst Appbar = (props: AppbarParams) => {\r\n    const classes = useStyles();\r\n    const {children} = props;\r\n    const {currentUser} = useContext(AuthContext)\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n            >\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        GigaTurnip Admin\r\n                    </Typography>\r\n                    {currentUser ?\r\n                        <Button onClick={signOut} color={\"inherit\"}>\r\n                            Log out\r\n                        </Button>\r\n                        :\r\n                        <Button onClick={signInWithGoogle} color={\"inherit\"}>\r\n                            Login\r\n                        </Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar}/>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Appbar\r\n","import React from \"react\";\r\nimport Graph from './components/graph/Graph'\r\nimport StageBuilder from './components/form-builders/StageBuilder'\r\nimport LogicBuilder from './components/form-builders/LogicBuilder'\r\nimport DocBuilder from \"./components/form-builders/DocBuilder\";\r\nimport Actions from './components/actions/Actions'\r\nimport Task from './components/task/Task'\r\nimport Appbar from \"./components/appbar/Appbar\";\r\n\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Chains from \"./components/chains/Chains\";\r\nimport Campaigns from \"./components/campaigns/Campaigns\";\r\nimport SimpleAppbar from \"./components/appbar/SimpleAppbar\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path={\"/campaign/:campaignId\"}>\r\n                        <Appbar>\r\n                            <Route exact path=\"/campaign/:campaignId/chain/:chainId/createstage/:id\">\r\n                                <StageBuilder/>\r\n                            </Route>\r\n                            <Route exact path=\"/campaign/:campaignId/chain/:chainId/createlogic/:id\">\r\n                                <LogicBuilder/>\r\n                            </Route>\r\n                            {/*<Route exact path=\"/campaign/:campaignId/chain/:chainId/createdoc/:id\">*/}\r\n                            {/*    <DocBuilder/>*/}\r\n                            {/*</Route>*/}\r\n                            <Route exact path=\"/campaign/:campaignId/chain/:chainId/task/:id\">\r\n                                <Task/>\r\n                            </Route>\r\n                            <Route exact path=\"/campaign/:campaignId/chain/:chainId/actions/:id\">\r\n                                <Actions/>\r\n                            </Route>\r\n                            <Route exact path=\"/campaign/:campaignId/chain\">\r\n                                <Chains/>\r\n                            </Route>\r\n                            {/*<Route exact path=\"/campaign/:campaignId/manual\">*/}\r\n                            {/*    <Chains/>*/}\r\n                            {/*</Route>*/}\r\n                            <Route exact path=\"/campaign/:campaignId/chain/:chainId\">\r\n                                <Graph/>\r\n                            </Route>\r\n                        </Appbar>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <SimpleAppbar>\r\n                            <Campaigns/>\r\n                        </SimpleAppbar>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {AuthProvider} from \"./util/Auth\";\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <AuthProvider>\r\n        <App/>\r\n    </AuthProvider>,\r\n    // </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}